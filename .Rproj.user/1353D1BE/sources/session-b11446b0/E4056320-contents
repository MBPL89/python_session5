---
title: "4. Strings Practice - Solution"
draft: true
author: "Dr. Piccoli"
format: live-html
pyodide:
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```

1)  Find and slice. Use find and string slicing to extract the portion of the string after the colon character and then use the float function to convert the extracted string into a floating point number.

    In the second cell below, generalize this algorithm. It should loop through the three strings provided in input and ensure that there is a ":" before extracting, converting and printing the number.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Here we create the algorithm for a single input
string = 'X-DSPAM-Confidence:0.8475'

if ":" in string :
    pos = string.find(":")
    number = float(string[pos+1: ])
    print(number)
else: 
    print("We could not find the ':' symbol")
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Here we generalize and replicate the above program for a list of strings in input
strings = ['X-DSPAM-Confidence:0.8475', 'no colon here', 'X-DSPAM-Confidence:0.345']

for string in strings :
    if ":" in string :
        pos = string.find(":")
        number = float(string[pos+1: ])
        print(number)
    else: 
        print("We could not find the ':' symbol")
```

2)  Create a program that, collects user input until the user types "done".

    Given any string in input will first check for the length of the string. If the string in less than 5 characters long, it prints the message "Can't do anything with such a short string, try harder!"

    When the string is longer than 5 character, then the program will slice the string and only extract the middle five characters.
    
```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("45\n10\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Collect first input and start the loop
inp = input('Please, enter some text. Type "done" to stop: ')

while inp != 'done' :
    string_length = len(inp)
    if string_length > 4 :
        starting = string_length // 2 - 2
        print(inp[starting : starting + 5])
    else:
        # We use the escape character \ within the string for illustration pursposes
        # Alternatively we could have simply used double quotes for the string:
        # print("Can't do anything with such a short string, try harder!")
        print('Can\'t do anything with such a short string, try harder!')
        
    inp = input('Please, enter some text. Type "done" to stop: ')
    
print('Thanks for playing with us!')
```

3)  Create a program that, collects user input until the user types "done".

    For each string in input, first, strip any white space at the beginning or the end of the string. Then delete all the vowels from the string and print the resulting string.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Collect first input and start the loop
inp = input('Please, enter some text. Type "done" to stop: ')

while inp != 'done' :
    text = inp.strip()
    for vowel in ['a', 'e', 'i', 'o', 'u'] :
        text = text.replace(vowel, "")

    print('Your input string with no vowels is: ', text)
    inp = input('Please, enter some text. Type "done" to stop: ')
    
print('Thanks for playing with us!')
```


4) **Count Vowels in a String** Create a function `count_vowels(text)` that counts the number of vowels (a, e, i, o, u) in a given string. Use a for loop and conditional statements to accomplish the task.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to count vowels in a string
def count_vowels(text):
    vowels = "aeiouAEIOU"  # Define vowels (both lowercase and uppercase)
    count = 0  # Initialize counter

    for char in text:  # Loop through each character in the string
        if char in vowels:  # Check if the character is a vowel
            count += 1  # Increment count if it's a vowel

    return count  # Return the total count of vowels

# Example usage
text = "Hello World"
print("Number of vowels in the text:", count_vowels(text))

```


5) **Password Strength Checker**
Write a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:
* If it's less than 6 characters → "Weak"
* If it's between 6-10 characters → "Moderate"
* If it's more than 10 characters → "Strong"


```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to check password strength
def check_password_strength(password):
    if len(password) < 6:
        return "Weak"
    elif 6 <= len(password) <= 10:
        return "Moderate"
    else:
        return "Strong"

# List of passwords to test
passwords = ["abc", "myp@ss1", "SuperSecurePassword123"]

# Loop through the list and test each password
for password in passwords:
    print("Password:", password, "-> Strength:", check_password_strength(password))
```
