---
title: '7. Data structures - lists, tuples, dictionaries'
jupyter: python3
---

## Lists

Like a string, a list is a sequence of values. In a string, the values are characters; in a list, they can be any type.

The simplest way to create a list is to enclose the elements in square brackets:

```{pyodide}
type([10, 20, 30, 40])
```

```{pyodide}
['crunchy frog', 'ram bladder', 'lark vomit']
```

You can create an empty list (and the fill it later):

```{pyodide}
[]
```

You can also place a list inside a list (a *nested* list):

```{pyodide}
['spam', 2.0, 5, [10, 20]]
```

### Lists are mutable

Unlike strings, lists are mutable because you can change the order of items in a list or reassign an item in a list.

```{pyodide}
numbers = [17, 123]
print(numbers)
```

```{pyodide}
numbers[1] = 5
print(numbers)
```

### List operations

The + operator concatenates lists:

```{pyodide}
a = [1, 2, 3]
b = [4, 5, 6]
c = a + b
print(c)
```

The \* operator repeats a list a given number of times:

```{pyodide}
[0] * 4
[0, 0, 0, 0]
```

```{pyodide}
[1, 2, 3] * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
```

The `in` operator also works on lists:

```{pyodide}
cheeses = ['Cheddar', 'Edam', 'Gouda']
'Edam' in cheeses
```

### List slices

Slicing lists works the same way as slicing strings.

```{pyodide}
t = ['a', 'b', 'c', 'd', 'e', 'f']
t[1:3]
```

```{pyodide}
t[:4]
```

```{pyodide}
t[3:]
```

### List methods

-   **append** adds an elemen to a list

```{pyodide}
t = ['a', 'b', 'c']
t.append('d')
print(t)
```

-   **extend** takes a list as an argument and appends all of its elements

```{pyodide}
t1 = ['a', 'b', 'c']
t2 = ['d', 'e']
t1.extend(t2)
print(t1)
```

-   **sort** arranges the elements from low to high

```{pyodide}
t = ['d', 'c', 'e', 'b', 'a']
t.sort()
print(t)
```

The list.sort() method uses ascending order by default, but you can reverse that using the reverse=True arguement. More importantly it uses Unicode sorting, but it has a second argument called key that allows you to specify a specific sorting criterion (see second example).

```{pyodide}
friends = ['joseph', 'Glenn', 'Sally' ]
friends.sort()
print(friends)
```

```{pyodide}
friends = ['Joseph', 'Glenn', 'Sally' ]
friends.sort(reverse = True)
print(friends)
```

```{pyodide}
friends = ['Joseph', 'glenn', 'Sally' ]
friends.sort(key = lambda x: x.lower())
print(friends)
```

### Deleting elements from a list

If you know the index of an element, you can use *pop* or *del*

-   **pop** modifies the list and returns the element that was removed

```{pyodide}
t = ['a', 'b', 'c']
x = t.pop(1)
print(t)
print(x)
```

-   **del** removes the element, but does not return the removed element

```{pyodide}
t = ['a', 'b', 'c']
del t[1]
print(t)
```

If you know the element you want to remove (but not the index), you can use **remove**:

```{pyodide}
t = ['a', 'b', 'c', 'b']
t.remove('b')
print(t)
```

To remove more than one element, you can use **del** with a slice index:

```{pyodide}
t = ['a', 'b', 'c', 'd', 'e', 'f']
del t[1:5]
print(t)
```

## Careful!! Lists do assignments by **reference**

If you assign a string to another string, you are creating **two separate** variables. That means that you will have two **separate memory references** where the value of the two variables are stored.

```{pyodide}
string1 = "The cat is on the table"
print(f'the value of string1 is: {string1}')
string2 = string1
string2 = 'Pippo'
print(f'the value of string2 is: {string2}')
print(f'the value of string1 is: {string1}')
```

This is not what happens with lists. When you assing a list to another list, you are assigning **the reference** to the first list, there is **one memory location** storing the value and **both lists** point to that same location.

```{pyodide}
list1 = [0, 1, 2, 3]
print(f'the value of list1 is: {list1}')
list2 = list1
list2.append('Pippo')
print(f'the value of list2 is: {list2}')
print(f'the value of list1 is: {list1}')
```

```{pyodide}
def reference_function(list_passed) :
    list_passed.append('weird')

list1 = [1, 2, 3]
reference_function(list1)
print(list1)
```

If you want to explicitely create a copy of a list, thereby creating a new memory location to store separate values from the original list you cannot do a simple assignment. You must instead use the **copy() method** that every list has.

```{pyodide}
list1 = [0, 1, 2, 3]
print(f'the value of list1 is: {list1}')
list2 = list1.copy()
list2.append('Pippo')
print(f'the value of list2 is: {list2}')
print(f'the value of list1 is: {list1}')
```

## Dictionaries

A dictionary is like a list, but more general. You can think of a dictionary as a mapping between a set of indices (which are called keys) and a set of values. The association of a key and a value is called a **key-value** pair or sometimes an item.

To create an empty dictionary you can:

-   use a **dict()** function

```{pyodide}
emptyD = dict()
print(emptyD)
```

-   use curly brackets **{}**

```{pyodide}
emptyD2 = {}
print(emptyD2)
type(emptyD2)
```

To add items to the dictionary, you can use square brackets:

```{pyodide}
emptyD2['key1'] = 1
emptyD2['key2'] = "two"

print(emptyD2)
```

You can also create a dictionary with values already in it.

```{pyodide}
eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}
print(eng2sp)
```

Keep in mind that the order of the key-value pairs might not be the same. The order of items in a dictionary is unpredictable because dictionaries are unordered sets.

However it is not a problem because we use the keys to look up the corresponding values:

```{pyodide}
 print(eng2sp['two'])
```

Keep in mind that the key must be unique. Otherwise you will not be able to identify the values.

If the key isn't in the dictionary, you get an exception:

```{pyodide}
 print(eng2sp['four'])
```

You can check if a key is in the dictionary by using **in** operator

```{pyodide}
'one' in eng2sp
```

```{pyodide}
'four' in eng2sp
```

To see whether something appears as a value in a dictionary, you can use the method **values**, which returns the values

```{pyodide}
eng2sp.values()
```

You can also convert it to a list

```{pyodide}
vals = list(eng2sp.values())

print(vals)
```

Analogically, you can use **keys** method, to find all the keys in the dictionary

```{pyodide}
ks = list(eng2sp.keys())

print(ks)
```

### Dictionaries as a set of counters

Imagine that you want to count the letters in a string (read: elements in a sequence).\
You could create a dictionary to hold the output for you where keys are the letters and values are counts.

```{pyodide}
fruit = 'banana'
d = dict()
for c in fruit:
    if c not in d:
        d[c] = 1
    else:
        d[c] = d[c] + 1
print(d)
```

You can use **get** method to be more efficient.

**get** takes a key and a default value. If the key exists in the dictionary, it reurns its value. If it does not, it returns the default value.

```{pyodide}
nat = { 'Gabriele' : 'IT' , 'Marcin' : 'PL', 'Federico': 'IT'}
print(nat.get('Marcin', 0))
```

```{pyodide}
print(nat.get('Stefano', ))
```

In the example above, 0 is the default value that is printed only when the key does not exist in the dictionary (think of it as a small *if / else* statement where 0 appears in the *else* block). You can replace it with other value types. For example, you could print *NA* instead of a *0*.

You can use this method to count the elements of a sequence more efficiently.

```{pyodide}
d = dict()
for c in fruit:
    d[c] = d.get(c,0) + 1
print(d)
```

## Tuples

A **tuple** is a sequence of values much like a list. The values stored in a tuple can be any type, and they are indexed by integers.

The important difference is that tuples are *immutable*.

A tuple is a comma-separated list of values:

```{pyodide}
t1 = 'a', 'b', 'c', 'd', 'e'
```

It is common to enclose tuples in parentheses (so you can find them quickly), but it is not necessary.

```{pyodide}
t2 = ('a', 'b', 'c', 'd', 'e')
```

```{pyodide}
print(t1)
print(t2)
```

Most list operators work on tuples. However, if you try to modify an element of a tuple, you will get an error.

```{pyodide}
t1[0] = 'A'
```

The way around this is to replace one tuple with another:

```{pyodide}
t1 = ('A',) + t1[1:]

print(t1)
```

### Tuple assignment

One of the unique features of the Python language is the ability to have a tuple on the left side of an assignment statement so you can assign more than one variable at a time.

Compare the two cells below:

```{pyodide}
a = 1
b = 2

print(a)
print(b)
```

```{pyodide}
c, d = 3, 4
print(c)
print(d)
```

A clever application of tuple assignment allows us to swap the values of two variables in a single statement:

```{pyodide}
a, b = b, a

print(a)
```

When doing this, however, you have to be careful about the number of values and variables.

```{pyodide}
a, b = 1, 2, 3
```

### Tuples and dictionaries

Before you saw how to find **keys** or **values** of a dictioanry. Dictionaries have also a method called **items** which returns a list of tuples, each tuple being showing a key value pair.

```{pyodide}
d = {'a':10, 'b':1, 'c':22}
t = list(d.items())
print(t)
```

You can also change the order to value-key if you write a simple loop.

```{pyodide}
l = list()
for key, val in d.items() :
    l.append( (val, key) )

print(l)
```

## List, dictionary or tuple?

-   Use a tuple when you know what information goes in it, it is a constant set of values (unlikely to change) and all you’re going to do with it is iterate through it.

    -   Tuples are faster and safer than lists (because they cannot be modified).
    -   For example, person’s credentials for your website, a set with names of the months.

-   Use a dictionary when you have an unordered set of unique keys that map to values, like in an address book.

-   Use lists when you want to store similar elements and when the order of elements in the sequence matters.
