{
  "hash": "cc18811769cdb6d026a2ce8ac337bb16",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3. Functions - Practice\"\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n    \n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\n\n\n\n## Excercises\n\n1) Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n|Score | Grade |\n|------|-------|\n|>= 0.9|A|\n|>= 0.8|B|\n|>= 0.7|C|    \n|>= 0.6|D|\n|< 0.6|F|\n\nComplete the code in the cell below:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the definition of the convert_grade function\n\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the list of scores to convert\nscores = [0.95, 0.66, 3, 0.75, 1, 0]\n\n# This is the program looping through the scores and printing the\n# letter grade conversion for each one.\n\n```\n:::\n\n\n\n\n\n## Challenge\n\nThis is a challenge that uses the skills you develped to this point.  \n\nWrite a function named `computations` that takes one parameter named `number`. If the number is even, the function print the text: **The number is even, the result is** followed by the number devided by 2. If the number is odd, the function print the text: **The number is odd, the result is** followed by the result of the expression `3 * number + 1`. \n\nUsing this function, write a program that allows a user to type any **integer** and then keeps calling `computations` until the result is **1**.  \n\nWhen the result of 1 is obtained (and it will be obtained for any integer), print the message **This computations function is bananas!!** and terminate the program. Make sure to use `try` and `except` to make sure is used to catch input errors (and print a meaningful message for the user).  \n\nMost of all, have fun with this coding challenge!\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n\n```\n:::\n",
    "supporting": [
      "p4-functions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}