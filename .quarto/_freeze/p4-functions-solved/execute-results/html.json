{
  "hash": "e8807fc1530d74178787f4136a45d88b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3. Functions - Practice Solved\"\ndraft: true\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n    \n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\n\n## Final exercise from the functions in class notebook\n\nRewrite the pay computation with time-and-a-half for overtime and create a function called **computepay** which takes two parameters (hours and rate). The user should be prompted to input hours and rate, then **computepay** is called on the two arguments that are passed.\\\nIf the function is working correctly, you can test it with these numbers:\n\n\n\n\n\n::: {.cell}\n\n```{.raw .cell-code}\nEnter Hours Worked: 45  \nEnter Rate of Pay: 10\n\nPay: 475.0\n```\n:::\n\n::: {.cell autorun='false' min-lines='3'}\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Define the function computepay\ndef computepay(hours, rate) :\n    try:\n        # The use of the variable inp here is akward\n        # the only reason we use it is becuase we are\n        # faithfully replicate the error message from the original program.\n        inp = hours\n        hours = float(inp)\n        inp = rate\n        rate = float(inp)\n        if hours > 40 :\n            pay = (1.5 * hours - 20) * rate\n        else :\n            pay = hours * rate\n        print('Pay: ', pay)\n    except: \n        print(inp, ' Error, please enter numeric input')\n\n# Collect input from the user\ninp1 = input('Enter Hours: \\n')\ninp2 = input('Enter Rate: ')\n\n# Call the computepay function to complete the computations\ncomputepay(inp1, inp2)\n\n```\n:::\n\n\n\n\n\n## Excercises\n\n1)  Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n| Score   | Grade |\n|---------|-------|\n| \\>= 0.9 | A     |\n| \\>= 0.8 | B     |\n| \\>= 0.7 | C     |\n| \\>= 0.6 | D     |\n| \\< 0.6  | F     |\n\nComplete the code in the cell below:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the definition of the convert_grade function\ndef convert_grade(inp) :\n    try :\n        score = float(inp)\n        \n        # Ensure input score is within acceptable range of values that can be meaningfully converted\n        if score >= 0 and score <= 1 :\n            if score >= 0.9 :\n                print('A')\n            elif score >= 0.8 :\n                print('B')\n            elif score >= 0.7 :\n                print('C')\n            elif score >= 0.6 :\n                print('D')\n            else :\n                print('F')\n        else :\n            print('Error, the score provided is out of acceptable range')\n    except :\n        print('Error, only numbers are allowed as input scores')\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the list of scores to convert\nscores = [0.95, 0.66, 3, 0.75, 1, 0, 'test']\n\n# This is the program looping through the scores and printing the\n# letter grade conversion for each one.\nfor score in scores :\n    convert_grade(score)\n```\n:::\n\n\n\n\n\n## Challenge\n\nThis is a challenge that uses the skills you develped to this point.\n\nWrite a function named `computations` that takes one parameter named `number`. If the number is even, the function prints the text: **The number is even, the result is** followed by the number devided by 2. If the number is odd, the function prints the text: **The number is odd, the result is** followed by the result of the expression `3 * number + 1`.\n\nUsing this function, write a program that allows a user to type any **integer** and then keeps calling `computations` until the result is **1**.\n\nWhen the result of 1 is obtained (and it will be obtained for any integer), print the message **This computations function is bananas!!** and terminate the program. Make sure to use `try` and `except` to catch input errors (and print a meaningful message for the user).\n\nMost of all, have fun with this coding challenge!\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Some preliminary notes:\n#\n# The // in the next line is not necessary. I could have used simple division with /\n# I use a \"floor division\" that returns an integer (it rounds down to nearest int)\n# It makes the output prettier, but there is not other reason to use it.\n# The same \"pretty result\" could be achieved wiht result = int(number / 2)\n#\n# The use of 'formatted printing' on the next line is also not necessary. \n# I could have used print('The number is, ' result).\n# In some cases however it is better to use formatted printing, to avoid a lot of \n# concatenation and also to make your code more readable.\n#\n# The second is a more 'modern' way to do formatted printing. It suses the f'text and {variables} here' format\n# This syntax allows for concise and readable string formatting in Python, \n# making it easier to include variables and expressions directly within strings.\n\n# First, create the function definition\ndef computations(number):\n    if number % 2 == 0:\n        result = number // 2\n        print('The number is even %d' %result)\n    else:\n        result = 3 * number + 1\n        print(f'The number is odd {result}')\n    return result\n\n# Collect input from user and wrap in error catching to stop the program upon non integer digits\ndata = input('Enter a number to Collatz: ')\ntry:\n    data = int(data)\n    if data >= 1:\n        while data != 1:\n            data = computations(data)\n        print('This computations function is bananas!!')\n    else:\n        print('Only positive integers greater than zero can Collatz!')\nexcept:\n    print('Please enter an integer number')\n```\n:::\n",
    "supporting": [
      "p4-functions-solved_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}