{
  "hash": "692f84803373f69c4264c25d40b4b22a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"4. Strings\"\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\n\n# 4. Strings\n\nA string is a sequence of characters. You can access the characters one at a time with the bracket operator:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit = 'banana'\nletter = fruit[1]\n```\n:::\n\n\n\n\n\nThe expression in brackets is called an **index**.\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(letter)\n```\n:::\n\n\n\n\n\nKeep in mind that in Python, the index is an offset from the beginning of the string, and the offset of the first letter is zero.  \n\n::: {.callout-warning} \nRemember that the value of the index has to be an integer!\n:::\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nletter = fruit[1.5]\n```\n:::\n\n\n\n\n\n## Length of strings\n\nTo get a length of a string, you can use function len()\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlen(fruit)\n```\n:::\n\n\n\n\n\nTo find the last element of a sequence, remember about starting from 0!!!\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlength = len(fruit)\n\nlastWrong = fruit[length] \n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlastCorrect = fruit[length-1] \n\nprint(lastCorrect)\n```\n:::\n\n\n\n\n\n## String slices\n\nA segment of a string is called a slice. Selecting a slice is similar to selecting a character:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(fruit[3:6])\n```\n:::\n\n\n\n\n\nIf you omit the first index (before the colon), the slice starts at the beginning of the string. If you omit the second index, the slice goes to the end of the string:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[:3]\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[3:]\n```\n:::\n\n\n\n\n\nIf the first index is greater than or equal to the second the result is an empty string, represented by two quotation marks:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit[3:3]\n```\n:::\n\n\n\n\n\n## String comparison\n\nThe word `in` is a boolean operator that takes two strings and returns True if the first appears as a substring in the second:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n'a' in 'banana'\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n'seed' in 'banana'\n```\n:::\n\n\n\n\n\nYou can use comparison operators to compare two string:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfruit == 'banana'\n```\n:::\n\n\n\n\n\nYou can use `>` and `<` to find alphabetical order.\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n\"apple\" > \"Banana\"\n```\n:::\n\n\n\n\n\n## Parsing text\n\nYou can use Python to find and extract a specific portion of text from a longer string. For example, find a domain address in an email:\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndata = 'From marcin.bartosiak@unipv.it Sat Apr  19 09:14:16 2020'\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find position of the @ sign\natpos = data.find('@')\nprint(atpos)\n```\n:::\n\n\n\n\n\n::: {.callout-warning} \nPay attention to syntax: variable.function()\n:::\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find position of the first space after the @\nsppos = data.find(' ',atpos)\nprint(sppos)\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n#find the hosting address\nhost = data[atpos+1:sppos]\nprint(host)\n```\n:::\n\n\n\n\n\n## Format operator\n\nThe format operator, `%` allows us to construct strings, replacing parts of the strings with the data stored in variables.  \n- `%d` - integer\n- `%g` - floating-point number\n- `%s` - string\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ncity = \"Pavia\"\n\nprint(\"University of %s\" % city)\n```\n:::\n\n\n\n\n\nYou can use multiple values too. \n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nyear = 2025\nprint(\"Today is March %drd, %d. We are in %s.\" % (5, year, city))\n```\n:::\n\n::: {.cell autorun='false' startover='false' min-lines='3' completion='true'}\n```{pyodide}\n#| autorun: false\n#| startover: false\n#| min-lines: 3\n#| completion: true\n#Extra practice chunk\n\n```\n:::\n\n\n\n\n\n\n::: disclaimer\n<p><strong>Images and GIFs Disclaimer:</strong> Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.</p>\n:::\n\n\n\n\n\n```{=html}\n<style>\n.disclaimer {\n  font-size: 0.8em;\n  color: #666;\n  border-top: 1px solid #ddd;\n  padding-top: 10px;\n  margin-top: 20px;\n}\n</style>\n```\n\n```{=html}\n<div>\n<!-- Footer Section -->\n<div style=\"\n  width: 100vw;\n  height: auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f9f9f9;\n  font-size: 12px;\n  border-top: 1px solid #ddd;\n  box-sizing: border-box;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 10px 20px;\n\">\n  <!-- Left-aligned -->\n  <div style=\"text-align: left; font-size: 16px;\">\n    Â© 2025. All Rights Reserved.\n  </div>\n  \n\n  <!-- Right-aligned -->\n  <div style=\"text-align: right; font-size: 16px;\">\n    Enabled by <a href=\"https://biagio-palese.netlify.app\" target=\"_blank\" style=\"text-decoration: none; color: #0073e6;\">Dr. Biagio Palese</a>\n  </div>\n</div>\n\n<!-- Mobile Responsiveness -->\n<style>\n  @media screen and (max-width: 768px) {\n    div[style*=\"width: 100vw\"] {\n      flex-direction: column;\n      height: auto;\n      padding: 10px 15px;\n    }\n    \n    div[style*=\"width: 100vw\"] > div {\n      text-align: center;\n      margin-bottom: 5px;\n    }\n  }\n</style>\n\n</div>\n```\n",
    "supporting": [
      "completed_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}