{
  "hash": "cb060a258d3eac9d95271516f17d7166",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3. Functions - Challenge Solved\"\ndraft: true\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n    \n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\n\nThis is a challenge that uses the skills you developed to this point\n\nWrite a function named *collatz()* that takes one parameter named *number*. If the number is even, the function print the text: **The number is even, the result is** followed by the number divided by 2. If the number is odd, the function print the text: **The number is odd, the result is** followed by the result of the expression 3 \\* the number + 1.\n\nUsing this function, write a program that allows a user to type any **integer** and then keeps calling *collatz()* until the result is **1**.\n\nWhen the result of 1 is obtained (and it will be obtained for any integer), print the message **This Collatz sequence is bananas!!** and terminate the program. Make sure to use *try* and *except* to make sure is used to catch input errors (and print a meaningful message for the user).\n\nMost of all, have fun with this coding challenge!\n\n\n\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef computations(number):\n    if number % 2 == 0:\n        result = number // 2\n        print('The number is even %d' %result)\n    else:\n        result = 3 * number + 1\n        print('The number is odd ', result)\n    return result\n\ndata = input('Enter a number to Collatz: ')\ntry:\n    data = int(data)\n    if data >= 1:\n        while data != 1:\n            data = computations(data)\n        print('This computations function is bananas!!')\n    else:\n        print('Only positive integers greater than zero can Collatz!')\nexcept:\n    print('Please enter an integer number')\n```\n:::\n\n```{=html}\n<div>\n<!-- Footer Section -->\n<div style=\"\n  width: 100vw;\n  height: auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f9f9f9;\n  font-size: 12px;\n  border-top: 1px solid #ddd;\n  box-sizing: border-box;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 10px 20px;\n\">\n  <!-- Left-aligned -->\n  <div style=\"text-align: left; font-size: 16px;\">\n    Â© 2025. All Rights Reserved.\n  </div>\n  \n\n  <!-- Right-aligned -->\n  <div style=\"text-align: right; font-size: 16px;\">\n    Enabled by <a href=\"https://biagio-palese.netlify.app\" target=\"_blank\" style=\"text-decoration: none; color: #0073e6;\">Dr. Biagio Palese</a>\n  </div>\n</div>\n\n<!-- Mobile Responsiveness -->\n<style>\n  @media screen and (max-width: 768px) {\n    div[style*=\"width: 100vw\"] {\n      flex-direction: column;\n      height: auto;\n      padding: 10px 15px;\n    }\n    \n    div[style*=\"width: 100vw\"] > div {\n      text-align: center;\n      margin-bottom: 5px;\n    }\n  }\n</style>\n\n</div>\n```\n",
    "supporting": [
      "challenge1-functions_solved_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}