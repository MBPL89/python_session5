{
  "hash": "d73875b08ff68605fa3be94a3061a765",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"5. Dictionary Challenge\"\n#draft: true\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\nThis is a challenge that uses the skills you developed to this point, with particular attention to the use of dictionaries\n\nThe task is to write a program that will compute the total amount a guest should pay by parsing an arbitrary restaurant check. The check, extracted from a point of sale, comes to you as a string with items, categories and amounts. You should extract the appropriate data and create a dictionary with food items and drink items as separate. Then you should compute the sum total of what the guest spent, keeping food and drink items separate. The output of your program will print two messages:\n\n`Total check value for food items is: $ [total value of all food items ordered]`\n\nand\n\n`Total check value for drink items is: $ [total value of all drink items ordered]`\n\nSince the data comes from a system, a Poing of Sale, you can be sure that its structure is fixed. You should ensure that your code works for a typical check, using the following sample:\n\n`data = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'`\n\nYou should then make sure your code generalizes to the following test cases:\n\n`data = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30'`\n\n`data = 'chicken food$12.50'`\n\n`data = ''`\n\nHint: your dictionary will be nested, with the following structure:\n\n`{'food': {'chicken': 12.5, 'burger': 10.5}, 'drink': {'beer': 5.0, 'wine': 6.5}}`\n\n\n\n\n::: {.cell persist='true' startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| persist: true\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n\n```\n:::\n\n\n\n\n\n2) **Multi-User Task Manager** Multi User Task Manager: You are creating a task manager where each user has their own list of tasks. Use a dictionary to store users and their tasks, where: The keys are usernames (strings). The values are lists of tasks (strings). \n\nImplement the following functions:\n1. `add_user(todo_dict, username)`: Adds a new user with an empty task list. If the user already exists, print a message.\n\n2. `add_task(todo_dict, username, task)`: Adds a task to the specified user’s task list. If the user doesn’t exist, print an error.\n\n3. `remove_task(todo_dict, username, task)`: Removes a task from the user’s list if it exists. If the user or task doesn’t exist, print an appropriate message.\n\n4. Test the functions by: \n* Creating 2 users. \n* Adding 3 tasks to each. \n* Printing the full to-do structure. \n* Removing a task for one user. \n* Attempting to remove a non-existent task for the other. \n* Printing the final structure.\n\nThis task requires a dictionary because you are mapping users to their respective task lists, which cannot be done efficiently using only a list.\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}