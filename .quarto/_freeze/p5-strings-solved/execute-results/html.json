{
  "hash": "ddd2c1479f1e89c73179363dd2f83872",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"4. Strings Practice - Solution\"\ndraft: true\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\n\n1)  Find and slice. Use find and string slicing to extract the portion of the string after the colon character and then use the float function to convert the extracted string into a floating point number.\n\n    In the second cell below, generalize this algorithm. It should loop through the three strings provided in input and ensure that there is a \":\" before extracting, converting and printing the number.\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Here we create the algorithm for a single input\nstring = 'X-DSPAM-Confidence:0.8475'\n\nif \":\" in string :\n    pos = string.find(\":\")\n    number = float(string[pos+1: ])\n    print(number)\nelse: \n    print(\"We could not find the ':' symbol\")\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Here we generalize and replicate the above program for a list of strings in input\nstrings = ['X-DSPAM-Confidence:0.8475', 'no colon here', 'X-DSPAM-Confidence:0.345']\n\nfor string in strings :\n    if \":\" in string :\n        pos = string.find(\":\")\n        number = float(string[pos+1: ])\n        print(number)\n    else: \n        print(\"We could not find the ':' symbol\")\n```\n:::\n\n\n\n\n\n2)  Create a program that, collects user input until the user types \"done\".\n\n    Given any string in input will first check for the length of the string. If the string in less than 5 characters long, it prints the message \"Can't do anything with such a short string, try harder!\"\n\n    When the string is longer than 5 character, then the program will slice the string and only extract the middle five characters.\n    \n\n\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Collect first input and start the loop\ninp = input('Please, enter some text. Type \"done\" to stop: ')\n\nwhile inp != 'done' :\n    string_length = len(inp)\n    if string_length > 4 :\n        starting = string_length // 2 - 2\n        print(inp[starting : starting + 5])\n    else:\n        # We use the escape character \\ within the string for illustration pursposes\n        # Alternatively we could have simply used double quotes for the string:\n        # print(\"Can't do anything with such a short string, try harder!\")\n        print('Can\\'t do anything with such a short string, try harder!')\n        \n    inp = input('Please, enter some text. Type \"done\" to stop: ')\n    \nprint('Thanks for playing with us!')\n```\n:::\n\n\n\n\n\n3)  Create a program that, collects user input until the user types \"done\".\n\n    For each string in input, first, strip any white space at the beginning or the end of the string. Then delete all the vowels from the string and print the resulting string.\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Collect first input and start the loop\ninp = input('Please, enter some text. Type \"done\" to stop: ')\n\nwhile inp != 'done' :\n    text = inp.strip()\n    for vowel in ['a', 'e', 'i', 'o', 'u'] :\n        text = text.replace(vowel, \"\")\n\n    print('Your input string with no vowels is: ', text)\n    inp = input('Please, enter some text. Type \"done\" to stop: ')\n    \nprint('Thanks for playing with us!')\n```\n:::\n\n\n\n\n\n\n4) **Count Vowels in a String** Create a function `count_vowels(text)` that counts the number of vowels (a, e, i, o, u) in a given string. Use a for loop and conditional statements to accomplish the task.\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to count vowels in a string\ndef count_vowels(text):\n    vowels = \"aeiouAEIOU\"  # Define vowels (both lowercase and uppercase)\n    count = 0  # Initialize counter\n\n    for char in text:  # Loop through each character in the string\n        if char in vowels:  # Check if the character is a vowel\n            count += 1  # Increment count if it's a vowel\n\n    return count  # Return the total count of vowels\n\n# Example usage\ntext = \"Hello World\"\nprint(\"Number of vowels in the text:\", count_vowels(text))\n\n```\n:::\n\n\n\n\n\n\n5) **Password Strength Checker**\nWrite a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:\n* If it's less than 6 characters → \"Weak\"\n* If it's between 6-10 characters → \"Moderate\"\n* If it's more than 10 characters → \"Strong\"\n\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to check password strength\ndef check_password_strength(password):\n    if len(password) < 6:\n        return \"Weak\"\n    elif 6 <= len(password) <= 10:\n        return \"Moderate\"\n    else:\n        return \"Strong\"\n\n# List of passwords to test\npasswords = [\"abc\", \"myp@ss1\", \"SuperSecurePassword123\"]\n\n# Loop through the list and test each password\nfor password in passwords:\n    print(\"Password:\", password, \"-> Strength:\", check_password_strength(password))\n```\n:::\n",
    "supporting": [
      "p5-strings-solved_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}