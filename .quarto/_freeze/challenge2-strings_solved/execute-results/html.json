{
  "hash": "1104779a6b3246cb03b60eb443ffa6fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"4. Challenge - Solution\"\ndraft: true\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nThis is a challenge that uses the skills you developed to this point, with particular attention to string manipulation\n\nThe task is to write a program that will compute the total amount a guest should pay by parsing an arbitrary restaurant check. The check, extracted from a point of sale, comes to you as a string with items, categories and amounts. You should extract the appropriate data and compute the sum total of what the guest spent.\n\nSince the data comes from a system, a Point of Sale, you can be sure that its structure is fixed. You should ensure that your code works for a typical check, using the following sample:\n\n```\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'\n```\n\nYou should then make sure your code generalizes to the following test cases:\n\n```\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30'\n```\n\n```\ndata = 'chicken food$12.50'\n```\n\n```\ndata = ''\n```\n\n### Write your code here\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'\n#data = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30'\n#data = 'chicken food$12.50'\n#data = ''\n\ndef extractor(input_string):\n  dollar_pos = data.find(\"$\")\n  semi_pos = data.find(\";\")\n  if semi_pos == -1:\n    number = input_string[dollar_pos + 1 : ]\n    output_string = \"done\"\n  else: \n    number = input_string[dollar_pos + 1 : semi_pos]\n    output_string = input_string[semi_pos + 1 : ]\n  number = float(number)\n  return number, output_string\n\ntotal = 0\nif data == '':\n  print('Nothing was ordered')\nelse:\n  while data != \"done\":\n    value, data = extractor(data)\n    total += value\n  print('The total check value is: $', total)\n```\n:::",
    "supporting": [
      "challenge2-strings_solved_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}