[
  {
    "objectID": "p6-data-structures-challenges.html",
    "href": "p6-data-structures-challenges.html",
    "title": "5. Data Sructures Practice",
    "section": "",
    "text": "Word Length Filter: Ask the user to input a sentence. Print all the words that are longer than 4 characters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCounting Specific Word: Given a list of strings, count how many times the word “apple” appears (case-insensitive).\n\n\n\n\n\n\n\n\n\n\nBuild a List from User Input: Ask the user to enter 5 names and store them in a list. Then print the list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild the infinite List from User Input: Ask the user to continue to enter names as long as the user does not type “done”. Then print the list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrint Dictionary Keys: You have a dictionary of animals and their sounds. Print all the animals (keys).\n\n\n\n\n\n\n\n\n\n\nSimple Login Check: Check if a username exists in a dictionary. If it does, print “Welcome!”, otherwise print “User not found.”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo-Do List Manager Create a function add_task(todo_list, task) that adds a task to a to-do list (list of strings). Then create another functioremove_task(todo_list, task) to remove a task if it exists. To test the functions, create a list of 5 things and loop through it to create the list. Then create a list of 2 things and remove them. Make sure to handle any situation where an item to remove is not in the list of added items. To verify your code, print the list after adding the 5 items, then print it again after removing the items."
  },
  {
    "objectID": "index.html#lists",
    "href": "index.html#lists",
    "title": "5. Data Structures",
    "section": "Lists",
    "text": "Lists\nLike a string, a list is a sequence of values. In a string, the values are characters; in a list, they can be any type.\nThe simplest way to create a list is to enclose the elements in square brackets:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can create an empty list (and the fill it later):\n\n\n\n\n\n\n\n\nYou can also place a list inside a list (a nested list):\n\n\n\n\n\n\n\n\n\nLists are mutable\nUnlike strings, lists are mutable because you can change the order of items in a list or reassign an item in a list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList operations\nThe + operator concatenates lists:\n\n\n\n\n\n\n\n\nThe * operator repeats a list a given number of times:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe in operator also works on lists:\n\n\n\n\n\n\n\n\n\n\nList slices\nSlicing lists works the same way as slicing strings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList methods\n\n\n\n\n\n\nNote\n\n\n\nappend adds an element to a list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nextend takes a list as an argument and appends all of its elements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nsort arranges the elements from low to high\n\n\n\n\n\n\n\n\n\n\nThe list.sort() method uses ascending order by default, but you can reverse that using the reverse=True argument. More importantly it uses Unicode sorting, but it has a second argument called key that allows you to specify a specific sorting criterion (see second example).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeleting elements from a list\nIf you know the index of an element, you can use pop or del\n\n\n\n\n\n\nNote\n\n\n\npop modifies the list and returns the element that was removed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\ndel removes the element, but does not return the removed element\n\n\n\n\n\n\n\n\n\n\nIf you know the element you want to remove (but not the index), you can use remove:\n\n\n\n\n\n\n\n\nTo remove more than one element, you can use del with a slice index:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCareful!! Lists do assignments by reference\n\n\nIf you assign a string to another string, you are creating two separate variables. That means that you will have two separate memory references where the value of the two variables are stored.\n\n\n\n\n\n\n\n\nThis is not what happens with lists. When you assign a list to another list, you are assigning the reference to the first list, there is one memory location storing the value and both lists point to that same location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you want to explicitly create a copy of a list, thereby creating a new memory location to store separate values from the original list you cannot do a simple assignment. You must instead use the copy() method that every list has."
  },
  {
    "objectID": "index.html#dictionaries",
    "href": "index.html#dictionaries",
    "title": "5. Data Structures",
    "section": "Dictionaries",
    "text": "Dictionaries\nA dictionary is like a list, but more general. You can think of a dictionary as a mapping between a set of indices (which are called keys) and a set of values. The association of a key and a value is called a key-value pair or sometimes an item.\nTo create an empty dictionary you can:\n\n\n\n\n\n\nNote\n\n\n\nuse a dict() function\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nuse curly brackets {}\n\n\n\n\n\n\n\n\n\n\nTo add items to the dictionary, you can use square brackets:\n\n\n\n\n\n\n\n\nYou can also create a dictionary with values already in it.\n\n\n\n\n\n\n\n\nKeep in mind that the order of the key-value pairs might not be the same. The order of items in a dictionary is unpredictable because dictionaries are unordered sets.\nHowever it is not a problem because we use the keys to look up the corresponding values:\n\n\n\n\n\n\n\n\nKeep in mind that the key must be unique. Otherwise you will not be able to identify the values.\nIf the key isn’t in the dictionary, you get an exception:\n\n\n\n\n\n\n\n\nYou can check if a key is in the dictionary by using in operator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo see whether something appears as a value in a dictionary, you can use the method values, which returns the values\n\n\n\n\n\n\n\n\nYou can also convert it to a list\n\n\n\n\n\n\n\n\nAnalogically, you can use keys method, to find all the keys in the dictionary\n\n\n\n\n\n\n\n\n\nDictionaries as a set of counters\nImagine that you want to count the letters in a string (read: elements in a sequence).\nYou could create a dictionary to hold the output for you where keys are the letters and values are counts.\n\n\n\n\n\n\n\n\nYou can use get method to be more efficient.\nget takes a key and a default value. If the key exists in the dictionary, it reurns its value. If it does not, it returns the default value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the example above, 0 is the default value that is printed only when the key does not exist in the dictionary (think of it as a small if / else statement where 0 appears in the else block). You can replace it with other value types. For example, you could print NA instead of a 0.\nYou can use this method to count the elements of a sequence more efficiently."
  },
  {
    "objectID": "index.html#tuples",
    "href": "index.html#tuples",
    "title": "5. Data Structures",
    "section": "Tuples",
    "text": "Tuples\nA tuple is a sequence of values much like a list. The values stored in a tuple can be any type, and they are indexed by integers.\n\n\n\n\n\n\nNote\n\n\n\nThe important difference is that tuples are immutable.\n\n\nA tuple is a comma-separated list of values:\n\n\n\n\n\n\n\n\nIt is common to enclose tuples in parentheses (so you can find them quickly), but it is not necessary.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost list operators work on tuples. However, if you try to modify an element of a tuple, you will get an error.\n\n\n\n\n\n\n\n\nThe way around this is to replace one tuple with another:\n\n\n\n\n\n\n\n\n\nTuple assignment\nOne of the unique features of the Python language is the ability to have a tuple on the left side of an assignment statement so you can assign more than one variable at a time.\nCompare the two cells below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA clever application of tuple assignment allows us to swap the values of two variables in a single statement:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWhen doing this, however, you have to be careful about the number of values and variables.\n\n\n\n\n\n\n\n\n\n\n\n\nTuples and dictionaries\nBefore you saw how to find keys or values of a dictioanry. Dictionaries have also a method called items which returns a list of tuples, each tuple being showing a key value pair.\n\n\n\n\n\n\n\n\nYou can also change the order to value-key if you write a simple loop."
  },
  {
    "objectID": "index.html#list-dictionary-or-tuple",
    "href": "index.html#list-dictionary-or-tuple",
    "title": "5. Data Structures",
    "section": "List, dictionary or tuple?",
    "text": "List, dictionary or tuple?\n\nUse a tuple when you know what information goes in it, it is a constant set of values (unlikely to change) and all you’re going to do with it is iterate through it.\n\nTuples are faster and safer than lists (because they cannot be modified).\nFor example, person’s credentials for your website, a set with names of the months.\n\nUse a dictionary when you have an unordered set of unique keys that map to values, like in an address book.\nUse lists when you want to store similar elements and when the order of elements in the sequence matters.\n\n\n\nImages and GIFs Disclaimer: Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.\n\n\n\n\n\n\n  \n  \n    © 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Biagio Palese"
  },
  {
    "objectID": "challenge4-dictionary_solved.html",
    "href": "challenge4-dictionary_solved.html",
    "title": "5. Dictionary Challenge - Solution",
    "section": "",
    "text": "Guest Check This is a challenge that uses the skills you develped to this point, with particular attention to the use of dictionaries.\n\nThe task is to write a program that will compute the total amount a guest should pay by parsing an arbitrary restaurant check. The check, extracted from a point of sale, comes to you as a string with items, categories and amounts. You should extract the appropriate data and create a dictionary with food items and drink items as separate. Then you should compute the sum total of what the guest spent, keeping food and drink items separate. The output of your program will print two messages:\nTotal check value for food items is: $ [total value of all food items ordered]\nand\nTotal check value for drink items is: $ [total value of all drink items ordered]\nSince the data comes from a system, a Point of Sale, you can be sure that its structure is fixed. You should ensure that your code works for a typical check, using the following sample:\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'\nYou should then make sure your code generalizes to the following test cases:\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30' data = 'chicken food$12.50' data = ''\nHint: your dictionary will be nested, with the following structure:\n{'food': {'chicken': 12.5, 'burger': 10.5}, 'drink': {'beer': 5.0, 'wine': 6.5}}\n\n\n\n\n\n\n\n\n\nMulti-User Task Manager Multi User Task Manager: You are creating a task manager where each user has their own list of tasks. Use a dictionary to store users and their tasks, where: The keys are usernames (strings). The values are lists of tasks (strings).\n\nImplement the following functions: 1. add_user(todo_dict, username): Adds a new user with an empty task list. If the user already exists, print a message.\n\nadd_task(todo_dict, username, task): Adds a task to the specified user’s task list. If the user doesn’t exist, print an error.\nremove_task(todo_dict, username, task): Removes a task from the user’s list if it exists. If the user or task doesn’t exist, print an appropriate message.\nTest the functions by:\n\n\nCreating 2 users.\nAdding 3 tasks to each.\nPrinting the full to-do structure.\nRemoving a task for one user.\nAttempting to remove a non-existent task for the other.\nPrinting the final structure.\n\nThis task requires a dictionary because you are mapping users to their respective task lists, which cannot be done efficiently using only a list."
  },
  {
    "objectID": "challenge3-lists_solved.html",
    "href": "challenge3-lists_solved.html",
    "title": "5. List Challenge - Solution",
    "section": "",
    "text": "This is a challenge that uses the skills you developed to this point, with particular attention to list manipulation\nThe task is to write a program that will compute the total amount a guest should pay by parsing an arbitrary restaurant check. The check, extracted from a point of sale, comes to you as a string with items, categories and amounts. You should extract the appropriate data and compute the sum total of what the guest spent. Keep food and drink items separate by printing two messages:\nTotal check value for food items is: $ [total value of all food items ordered]\nand\nTotal check value for drink items is: $ [total value of all drink items ordered]\nSince the data comes from a system, a Poing of Sale, you can be sure that its structure is fixed. You should ensure that your code works for a typical check, using the following sample:\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'\nYou should then make sure your code generalizes to the following test cases:\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30'\ndata = 'chicken food$12.50'\ndata = ''"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "challenge3-lists.html",
    "href": "challenge3-lists.html",
    "title": "5. List Challenge",
    "section": "",
    "text": "This is a challenge that uses the skills you developed to this point, with particular attention to list manipulation\nThe task is to write a program that will compute the total amount a guest should pay by parsing an arbitrary restaurant check. The check, extracted from a point of sale, comes to you as a string with items, categories and amounts. You should extract the appropriate data and compute the sum total of what the guest spent. Keep food and drink items separate by printing two messages:\nTotal check value for food items is: $ [total value of all food items ordered]\nand\nTotal check value for drink items is: $ [total value of all drink items ordered]\nSince the data comes from a system, a Poing of Sale, you can be sure that its structure is fixed. You should ensure that your code works for a typical check, using the following sample:\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'\nYou should then make sure your code generalizes to the following test cases:\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30'\ndata = 'chicken food$12.50'\ndata = ''"
  },
  {
    "objectID": "challenge4-dictionary.html",
    "href": "challenge4-dictionary.html",
    "title": "5. Dictionary Challenge",
    "section": "",
    "text": "This is a challenge that uses the skills you developed to this point, with particular attention to the use of dictionaries\nThe task is to write a program that will compute the total amount a guest should pay by parsing an arbitrary restaurant check. The check, extracted from a point of sale, comes to you as a string with items, categories and amounts. You should extract the appropriate data and create a dictionary with food items and drink items as separate. Then you should compute the sum total of what the guest spent, keeping food and drink items separate. The output of your program will print two messages:\nTotal check value for food items is: $ [total value of all food items ordered]\nand\nTotal check value for drink items is: $ [total value of all drink items ordered]\nSince the data comes from a system, a Poing of Sale, you can be sure that its structure is fixed. You should ensure that your code works for a typical check, using the following sample:\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'\nYou should then make sure your code generalizes to the following test cases:\ndata = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30'\ndata = 'chicken food$12.50'\ndata = ''\nHint: your dictionary will be nested, with the following structure:\n{'food': {'chicken': 12.5, 'burger': 10.5}, 'drink': {'beer': 5.0, 'wine': 6.5}}\n\n\n\n\n\n\n\n\n\nMulti-User Task Manager Multi User Task Manager: You are creating a task manager where each user has their own list of tasks. Use a dictionary to store users and their tasks, where: The keys are usernames (strings). The values are lists of tasks (strings).\n\nImplement the following functions: 1. add_user(todo_dict, username): Adds a new user with an empty task list. If the user already exists, print a message.\n\nadd_task(todo_dict, username, task): Adds a task to the specified user’s task list. If the user doesn’t exist, print an error.\nremove_task(todo_dict, username, task): Removes a task from the user’s list if it exists. If the user or task doesn’t exist, print an appropriate message.\nTest the functions by:\n\n\nCreating 2 users.\nAdding 3 tasks to each.\nPrinting the full to-do structure.\nRemoving a task for one user.\nAttempting to remove a non-existent task for the other.\nPrinting the final structure.\n\nThis task requires a dictionary because you are mapping users to their respective task lists, which cannot be done efficiently using only a list."
  },
  {
    "objectID": "completed.html#lists",
    "href": "completed.html#lists",
    "title": "5. Data Structures",
    "section": "Lists",
    "text": "Lists\nLike a string, a list is a sequence of values. In a string, the values are characters; in a list, they can be any type.\nThe simplest way to create a list is to enclose the elements in square brackets:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can create an empty list (and the fill it later):\n\n\n\n\n\n\n\n\nYou can also place a list inside a list (a nested list):\n\n\n\n\n\n\n\n\n\nLists are mutable\nUnlike strings, lists are mutable because you can change the order of items in a list or reassign an item in a list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList operations\nThe + operator concatenates lists:\n\n\n\n\n\n\n\n\nThe * operator repeats a list a given number of times:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe in operator also works on lists:\n\n\n\n\n\n\n\n\n\n\nList slices\nSlicing lists works the same way as slicing strings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList methods\n\n\n\n\n\n\nNote\n\n\n\nappend adds an element to a list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nextend takes a list as an argument and appends all of its elements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nsort arranges the elements from low to high\n\n\n\n\n\n\n\n\n\n\nThe list.sort() method uses ascending order by default, but you can reverse that using the reverse=True argument. More importantly it uses Unicode sorting, but it has a second argument called key that allows you to specify a specific sorting criterion (see second example).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeleting elements from a list\nIf you know the index of an element, you can use pop or del\n\n\n\n\n\n\nNote\n\n\n\npop modifies the list and returns the element that was removed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\ndel removes the element, but does not return the removed element\n\n\n\n\n\n\n\n\n\n\nIf you know the element you want to remove (but not the index), you can use remove:\n\n\n\n\n\n\n\n\nTo remove more than one element, you can use del with a slice index:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCareful!! Lists do assignments by reference\n\n\nIf you assign a string to another string, you are creating two separate variables. That means that you will have two separate memory references where the value of the two variables are stored.\n\n\n\n\n\n\n\n\nThis is not what happens with lists. When you assign a list to another list, you are assigning the reference to the first list, there is one memory location storing the value and both lists point to that same location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you want to explicitly create a copy of a list, thereby creating a new memory location to store separate values from the original list you cannot do a simple assignment. You must instead use the copy() method that every list has."
  },
  {
    "objectID": "completed.html#dictionaries",
    "href": "completed.html#dictionaries",
    "title": "5. Data Structures",
    "section": "Dictionaries",
    "text": "Dictionaries\nA dictionary is like a list, but more general. You can think of a dictionary as a mapping between a set of indices (which are called keys) and a set of values. The association of a key and a value is called a key-value pair or sometimes an item.\nTo create an empty dictionary you can:\n\n\n\n\n\n\nNote\n\n\n\nuse a dict() function\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nuse curly brackets {}\n\n\n\n\n\n\n\n\n\n\nTo add items to the dictionary, you can use square brackets:\n\n\n\n\n\n\n\n\nYou can also create a dictionary with values already in it.\n\n\n\n\n\n\n\n\nKeep in mind that the order of the key-value pairs might not be the same. The order of items in a dictionary is unpredictable because dictionaries are unordered sets.\nHowever it is not a problem because we use the keys to look up the corresponding values:\n\n\n\n\n\n\n\n\nKeep in mind that the key must be unique. Otherwise you will not be able to identify the values.\nIf the key isn’t in the dictionary, you get an exception:\n\n\n\n\n\n\n\n\nYou can check if a key is in the dictionary by using in operator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo see whether something appears as a value in a dictionary, you can use the method values, which returns the values\n\n\n\n\n\n\n\n\nYou can also convert it to a list\n\n\n\n\n\n\n\n\nAnalogically, you can use keys method, to find all the keys in the dictionary\n\n\n\n\n\n\n\n\n\nDictionaries as a set of counters\nImagine that you want to count the letters in a string (read: elements in a sequence).\nYou could create a dictionary to hold the output for you where keys are the letters and values are counts.\n\n\n\n\n\n\n\n\nYou can use get method to be more efficient.\nget takes a key and a default value. If the key exists in the dictionary, it reurns its value. If it does not, it returns the default value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the example above, 0 is the default value that is printed only when the key does not exist in the dictionary (think of it as a small if / else statement where 0 appears in the else block). You can replace it with other value types. For example, you could print NA instead of a 0.\nYou can use this method to count the elements of a sequence more efficiently."
  },
  {
    "objectID": "completed.html#tuples",
    "href": "completed.html#tuples",
    "title": "5. Data Structures",
    "section": "Tuples",
    "text": "Tuples\nA tuple is a sequence of values much like a list. The values stored in a tuple can be any type, and they are indexed by integers.\n\n\n\n\n\n\nNote\n\n\n\nThe important difference is that tuples are immutable.\n\n\nA tuple is a comma-separated list of values:\n\n\n\n\n\n\n\n\nIt is common to enclose tuples in parentheses (so you can find them quickly), but it is not necessary.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost list operators work on tuples. However, if you try to modify an element of a tuple, you will get an error.\n\n\n\n\n\n\n\n\nThe way around this is to replace one tuple with another:\n\n\n\n\n\n\n\n\n\nTuple assignment\nOne of the unique features of the Python language is the ability to have a tuple on the left side of an assignment statement so you can assign more than one variable at a time.\nCompare the two cells below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA clever application of tuple assignment allows us to swap the values of two variables in a single statement:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWhen doing this, however, you have to be careful about the number of values and variables.\n\n\n\n\n\n\n\n\n\n\n\n\nTuples and dictionaries\nBefore you saw how to find keys or values of a dictioanry. Dictionaries have also a method called items which returns a list of tuples, each tuple being showing a key value pair.\n\n\n\n\n\n\n\n\nYou can also change the order to value-key if you write a simple loop."
  },
  {
    "objectID": "completed.html#list-dictionary-or-tuple",
    "href": "completed.html#list-dictionary-or-tuple",
    "title": "5. Data Structures",
    "section": "List, dictionary or tuple?",
    "text": "List, dictionary or tuple?\n\nUse a tuple when you know what information goes in it, it is a constant set of values (unlikely to change) and all you’re going to do with it is iterate through it.\n\nTuples are faster and safer than lists (because they cannot be modified).\nFor example, person’s credentials for your website, a set with names of the months.\n\nUse a dictionary when you have an unordered set of unique keys that map to values, like in an address book.\nUse lists when you want to store similar elements and when the order of elements in the sequence matters.\n\n\n\nImages and GIFs Disclaimer: Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.\n\n\n\n\n\n\n  \n  \n    © 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Biagio Palese"
  },
  {
    "objectID": "p6-data-structures-challenges-solved.html",
    "href": "p6-data-structures-challenges-solved.html",
    "title": "5. Data Sructures Practice - Solution",
    "section": "",
    "text": "Word Length Filter: Ask the user to input a sentence. Print all the words that are longer than 4 characters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCounting Specific Word: Given a list of strings, count how many times the word “apple” appears (case-insensitive).\n\n\n\n\n\n\n\n\n\n\nBuild a List from User Input: Ask the user to enter 5 names and store them in a list. Then print the list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild the infinite List from User Input: Ask the user to continue to enter names as long as the user does not type “done”. Then print the list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrint Dictionary Keys: You have a dictionary of animals and their sounds. Print all the animals (keys).\n\n\n\n\n\n\n\n\n\n\nSimple Login Check: Check if a username exists in a dictionary. If it does, print “Welcome!”, otherwise print “User not found.”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo-Do List Manager Create a function add_task(todo_list, task) that adds a task to a to-do list (list of strings). Then create another functioremove_task(todo_list, task) to remove a task if it exists. To test the functions, create a list of 5 things and loop through it to create the list. Then create a list of 2 things and remove them. Make sure to handle any situation where an item to remove is not in the list of added items. To verify your code, print the list after adding the 5 items, then print it again after removing the items."
  }
]