---
title: "5. Dictionary Challenge - Solution"
#draft: true
author: "Dr. Piccoli"
format: live-html
pyodide:
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```

1) **Guest Check** This is a challenge that uses the skills you develped to this point, with particular attention to the use of dictionaries. 

The task is to write a program that will compute the total amount a guest should pay by parsing an arbitrary restaurant check. The check, extracted from a point of sale, comes to you as a string with items, categories and amounts. You should extract the appropriate data and create a dictionary with food items and drink items as separate. Then you should compute the sum total of what the guest spent, keeping food and drink items separate. The output of your program will print two messages:

`Total check value for food items is: $ [total value of all food items ordered]`

and

`Total check value for drink items is: $ [total value of all drink items ordered]`

Since the data comes from a system, a Point of Sale, you can be sure that its structure is fixed. You should ensure that your code works for a typical check, using the following sample:

`data = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'`

You should then make sure your code generalizes to the following test cases:

`data = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30'`
`data = 'chicken food$12.50'`
`data = ''`

Hint: your dictionary will be nested, with the following structure:

`{'food': {'chicken': 12.5, 'burger': 10.5}, 'drink': {'beer': 5.0, 'wine': 6.5}}`


```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
data = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50'
#data = 'chicken food$12.50;burger food$10.50;beer drink$5.00;wine drink$6.50;soda drink$2.50;poke food$14.30'
#data = 'chicken food$12.50'
#data = ''

data_list = data.split(";")

item_temp = []
items_dict = {}

#Split string into a list of three items
for element in data_list:
  it = element.split("$")
  it2 = it[0].split(" ")
  it2.append(float(it[1]))
  item_temp.append(it2)

# Extract values from the list and create the dictionary
for item in item_temp:
    if item[1] not in items_dict:
        items_dict.update({item[1]: {item[0]:item[2]}})
    elif item[1] in items_dict:
        items_dict[item[1]].update({item[0]:item[2]})
    else:
        print("Nothing added")

# Print the results
#print(items_dict)
if len(items_dict) == 0:
  print('Noting was ordered in this check')
else:
  for key in items_dict.keys():
    total = sum(items_dict[key].values())
    print("Total check value for " + key + " items is: $", total)
```

2) **Multi-User Task Manager** Multi User Task Manager: You are creating a task manager where each user has their own list of tasks. Use a dictionary to store users and their tasks, where: The keys are usernames (strings). The values are lists of tasks (strings). 

Implement the following functions:
1. `add_user(todo_dict, username)`: Adds a new user with an empty task list. If the user already exists, print a message.

2. `add_task(todo_dict, username, task)`: Adds a task to the specified user’s task list. If the user doesn’t exist, print an error.

3. `remove_task(todo_dict, username, task)`: Removes a task from the user’s list if it exists. If the user or task doesn’t exist, print an appropriate message.

4. Test the functions by: 
* Creating 2 users. 
* Adding 3 tasks to each. 
* Printing the full to-do structure. 
* Removing a task for one user. 
* Attempting to remove a non-existent task for the other. 
* Printing the final structure.

This task requires a dictionary because you are mapping users to their respective task lists, which cannot be done efficiently using only a list.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Add a new user with an empty task list
def add_user(todo_dict, username):
    if username not in todo_dict:
        todo_dict[username] = []
        print(f"User '{username}' added.")
    else:
        print(f"User '{username}' already exists.")

# Add a task to a user's task list
def add_task(todo_dict, username, task):
    if username in todo_dict:
        todo_dict[username].append(task)
        print(f"Task '{task}' added to user '{username}'.")
    else:
        print(f"Error: User '{username}' does not exist.")

# Remove a task from a user's task list
def remove_task(todo_dict, username, task):
    if username in todo_dict:
        if task in todo_dict[username]:
            todo_dict[username].remove(task)
            print(f"Task '{task}' removed from user '{username}'.")
        else:
            print(f"Error: Task '{task}' not found for user '{username}'.")
    else:
        print(f"Error: User '{username}' does not exist.")

# Initialize the to-do dictionary
todo_dict = {}

# Add users
add_user(todo_dict, "alice")
add_user(todo_dict, "bob")

# Add tasks for each user
add_task(todo_dict, "alice", "Buy groceries")
add_task(todo_dict, "alice", "Finish report")
add_task(todo_dict, "alice", "Call the bank")

add_task(todo_dict, "bob", "Clean room")
add_task(todo_dict, "bob", "Study for exam")
add_task(todo_dict, "bob", "Reply to emails")

# Display the to-do list structure after adding
print("\nTo-do list after adding tasks:")
for user, tasks in todo_dict.items():
    print(f"{user}: {tasks}")

# Remove tasks
remove_task(todo_dict, "alice", "Finish report")
remove_task(todo_dict, "bob", "Go jogging")  # this one doesn't exist

# Final to-do list
print("\nFinal to-do list:")
for user, tasks in todo_dict.items():
    print(f"{user}: {tasks}")
```
