---
title: "5. Data Sructures Practice"
#draft: true
author: "Dr. Piccoli"
format: live-html
pyodide:
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```

1) **Word Length Filter**: Ask the user to input a sentence. Print all the words that are longer than 4 characters.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
mock_input = StringIO("here is a sentence with words of varying length\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3

```

2) **Counting Specific Word**: Given a list of strings, count how many times the word "apple" appears (case-insensitive).

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
fruits = ["Apple", "banana", "APPLE", "orange", "apple"]


```

3) **Build a List from User Input**: Ask the user to enter 5 names and store them in a list. Then print the list.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
mock_input = StringIO("…\n…\n…\n…\n…\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3

```

4) **Build the infinite List from User Input**: Ask the user to continue to enter names as long as the user does not type “done”. Then print the list.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
mock_input = StringIO("…\n…\n…\ndone\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
 
```

5) **Print Dictionary Keys**: You have a dictionary of animals and their sounds. Print all the animals (keys).

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
sounds = {"dog": "bark", "cat": "meow", "cow": "moo"}

```

6) **Simple Login Check**: Check if a username exists in a dictionary. If it does, print "Welcome!", otherwise print "User not found."

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
mock_input = StringIO("…\n")
sys.stdin = mock_input
users = {"alice": "1234", "bob": "abcd"}
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3

```


7)  **To-Do List Manager** Create a function `add_task(todo_list, task)` that adds a task to a to-do list (list of strings). Then create another `functioremove_task(todo_list, task)` to remove a task if it exists. To test the functions, create a list of 5 things and loop through it to create the list. Then create a list of 2 things and remove them. Make sure to handle any situation where an item to remove is not in the list of added items. To verify your code, print the list after adding the 5 items, then print it again after removing the items.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3


```
